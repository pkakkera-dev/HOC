{"version":3,"sources":["components/Home.jsx","components/DataLoader.jsx","components/Albums.jsx","components/Songs.jsx","components/About.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","props","className","DataLoader","WrappedComponent","state","data","console","log","this","fetchData","dataType","fetch","then","res","json","splice","setState","catch","err","error","React","Component","DataLoadAlbum","length","map","item","key","id","title","About","App","to","path","exact","component","Albums","Songs","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"sNAOeA,G,KAJF,SAAAC,GACX,OAAO,yBAAKC,UAAU,QAAf,uB,wCCiCMC,EAnCI,SAAAF,GAAK,OAAI,SAAAG,GAgC1B,OAhC8C,2MAE5CC,MAAQ,CACNC,KAAM,IAHoC,mFAO1CC,QAAQC,IAAI,qBACZC,KAAKC,UAAUT,EAAMU,YARqB,gCAWlCA,GAAW,IAAD,OAClB,IAEEC,MADc,wCAA0CD,GAErDE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAP,GACJ,IAAMI,EAAYJ,EAAKU,OAAO,EAAG,IACjC,EAAKC,SAAS,CACZX,KAAMI,OAGTQ,OAAM,SAAAC,GAAG,OAAIZ,QAAQC,IAAI,2BAC5B,MAAOY,GACPb,QAAQC,IAAI,2BAA4BY,MAxBA,+BA4B1C,OAAO,kBAAChB,EAAD,CAAkBE,KAAMG,KAAKJ,MAAMC,WA5BA,GAC5Be,IAAMC,aCgBXC,EADOpB,EAAW,CAAEQ,SAAU,UAAvBR,EAdP,SAAAF,GAEb,OADAM,QAAQC,IAAIP,GAEV,yBAAKC,UAAU,UACZD,GACCA,EAAMK,MACNL,EAAMK,KAAKkB,OAAS,GACpBvB,EAAMK,KAAKmB,KAAI,SAAAC,GACb,OAAO,0BAAMC,IAAKD,EAAKE,IAAKF,EAAKG,cCK5B1B,IAAW,CAAEQ,SAAU,UAAvBR,EAbD,SAAAF,GACZ,OACE,yBAAKC,UAAU,SACZD,GACCA,EAAMK,MACNL,EAAMK,KAAKkB,OAAS,GACpBvB,EAAMK,KAAKmB,KAAI,SAAAC,GACb,OAAO,0BAAMC,IAAKD,EAAKE,IAAhB,IAAsBF,EAAKG,cCJ7BC,EAJD,SAAA7B,GACZ,OAAO,yBAAKC,UAAU,SAAf,uBCyBM6B,MArBf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,IAAD,KACE,yBAAKA,UAAU,YACb,kBAAC,IAAD,CAAM8B,GAAG,KAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,UACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,WAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWnC,IACjC,kBAAC,IAAD,CAAOiC,KAAK,UAAUE,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,SAASE,UAAWE,IAChC,kBAAC,IAAD,CAAOJ,KAAK,SAASE,UAAWL,QCVtBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAE,GACLb,QAAQa,MAAMA,EAAMgC,a","file":"static/js/main.94177dc2.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../styles/style.scss\";\n\nconst Home = props => {\n  return <div className=\"home\">This is Home Page</div>;\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst DataLoader = props => WrappedComponent => {\n  class HOC extends React.Component {\n    state = {\n      data: {}\n    };\n\n    componentDidMount() {\n      console.log(\"componentDidMount\");\n      this.fetchData(props.dataType);\n    }\n\n    fetchData(dataType) {\n      try {\n        let baseURL = \"https://jsonplaceholder.typicode.com/\" + dataType;\n        fetch(baseURL)\n          .then(res => res.json())\n          .then(data => {\n            const fetchData = data.splice(0, 10);\n            this.setState({\n              data: fetchData\n            });\n          })\n          .catch(err => console.log(\"something went wrong\"));\n      } catch (error) {\n        console.log(\"fetchRemoteData error : \", error);\n      }\n    }\n    render() {\n      return <WrappedComponent data={this.state.data} />;\n    }\n  }\n\n  return HOC;\n};\n\nexport default DataLoader;\n","import React from \"react\";\nimport \"../styles/style.scss\";\nimport DataLoader from \"./DataLoader\";\n\nconst Albums = props => {\n  console.log(props);\n  return (\n    <div className=\"albums\">\n      {props &&\n        props.data &&\n        props.data.length > 0 &&\n        props.data.map(item => {\n          return <span key={item.id}>{item.title}</span>;\n        })}\n    </div>\n  );\n};\n\nconst DataLoadAlbum = DataLoader({ dataType: \"albums\" })(Albums);\nexport default DataLoadAlbum;\n","import React from \"react\";\nimport \"../styles/style.scss\";\nimport DataLoader from \"./DataLoader\";\n\nconst Songs = props => {\n  return (\n    <div className=\"songs\">\n      {props &&\n        props.data &&\n        props.data.length > 0 &&\n        props.data.map(item => {\n          return <span key={item.id}> {item.title}</span>;\n        })}\n    </div>\n  );\n};\n\nexport default DataLoader({ dataType: \"photos\" })(Songs);\n","import React from \"react\";\nimport \"../styles/style.scss\";\n\nconst About = props => {\n  return <div className=\"about\">This is About Page</div>;\n};\n\nexport default About;\n","import React from \"react\";\nimport { BrowserRouter as Router, Link, Route, Switch } from \"react-router-dom\";\nimport \"./styles/style.scss\";\nimport Home from \"./components/Home\";\nimport Albums from \"./components/Albums\";\nimport Songs from \"./components/Songs\";\nimport About from \"./components/About\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div className=\"nav-link\">\n          <Link to=\"/\"> Home</Link>\n          <Link to=\"albums\"> Album</Link>\n          <Link to=\"/songs\"> Songs</Link>\n          <Link to=\"/about\"> About</Link>\n        </div>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/albums\" component={Albums} />\n          <Route path=\"/songs\" component={Songs} />\n          <Route path=\"/about\" component={About} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}